package test.algorithm;

import test.base.integerTest.IntegerUtil;
import test.base.math.RandomMath;

/**
 * 桶排序
 *
 * 效率分析：
 * 桶排序的平均时间复杂度为线性的O(N+C)，其中C为桶内快排的时间复杂度。如果相对于同样的N，桶数量M越大，其效率越高，最好的时间复杂度达到O(N)。
 * 当然桶排序的空间复杂度 为O(N+M)，如果输入数据非常庞大，而桶的数量也非常多，则空间代价无疑是昂贵的。此外，桶排序是稳定的。
 *
 * 基本思想：
 * 桶排序假设序列由一个随机过程产生，该过程将元素均匀而独立地分布在区间[0,1)上。
 * 我们把区间[0,1)划分成n个相同大小的子区间，称为桶。将n个记录分布到各个桶中去。
 * 如果有多于一个记录分到同一个桶中，需要进行桶内排序。最后依次把各个桶中的记录列出来记得到有序序列。
 *
 * 例子
 一年的全国高考考生人数为500 万，分数使用标准分，最低100 ，最高900 ，没有小数，你把这500 万元素的数组排个序。
 分析：对500W数据排序，如果基于比较的先进排序，平均比较次数为O(5000000*log5000000)≈1.112亿。但是我们发现，这些数据都有特殊的条件：  100=<score<=900。那么我们就可以考虑桶排序这样一个“投机取巧”的办法、让其在毫秒级别就完成500万排序。
 方法：创建801(900-100)个桶。将每个考生的分数丢进f(score)=score-100的桶中。这个过程从头到尾遍历一遍数据只需要500W次。然后根据桶号大小依次将桶中数值输出，即可以得到一个有序的序列。而且可以很容易的得到100分有***人，501分有***人。
 实际上，桶排序对数据的条件有特殊要求，如果上面的分数不是从100-900，而是从0-2亿，那么分配2亿个桶显然是不可能的。所以桶排序有其局限性，适合元素值集合并不大的情况。
 * Created by tcc on 2017/9/1.
 */
public class BasketSort {

    protected static void testBasket(){
        testBasket(100, 10100, 10000, 10, true);
    }

    protected static void testBasketFast(){
        testBasketFast(100, 10100, 10000, true);
    }

    protected static void testBasket(int size, int upperBound, int lownBound, int number_of_bucket, boolean print){
        int[] toSortData = RandomMath.arrayInteger(size, upperBound, lownBound);

        int max = IntegerUtil.maxValue(toSortData);
        int min = IntegerUtil.minValue(toSortData);
        long millesTime = System.currentTimeMillis();
        long nanoTime = System.nanoTime();
        BasketSort.basket(toSortData, number_of_bucket, max, min);
        millesTime = System.currentTimeMillis() - millesTime;
        nanoTime = System.nanoTime() - nanoTime;
        System.out.println("basket sort data length: " + toSortData.length + ",max:" + IntegerUtil.maxValue(toSortData) + ",min:" + IntegerUtil.minValue(toSortData) + ",used time Millis time:" + millesTime + " ,nano time:" + nanoTime);
        if(print) {
            for (int i = 0; i < toSortData.length; i++) {
                System.out.print(toSortData[i] + ",");
            }
        }
    }

    /**
     *  桶排序  速度较慢 有待优化
     * @param data  data为待排序数组
     * @param number_of_bucket    分成多少个桶
     * @param maximum_array_value   数组最大值
     * @param minimum_array_value   数组最小值
     */
    public static void basket(int data[], final int number_of_bucket, final int maximum_array_value, final int minimum_array_value){
        int bask[][] = new int[number_of_bucket][data.length];
        int index[] = new int[data.length];
        int pos = 0;
        // 将数据按公式装入空桶中 value*number_of_elements/(maximum_array_value + 1)
        for(int i = 0;i < data.length;i++){
            pos = (data[i] - minimum_array_value)*number_of_bucket/(maximum_array_value - minimum_array_value + 1);
            bask[pos][index[pos]++] = data[i];
        }
        // 对各个桶中包含两个及以上的数据进行排序 这里使用快排
        for(int i = 0;i < number_of_bucket;i++){
            if(index[i]>1){
                QuickSort.quickSort(bask[i], 0, index[i] - 1);
            }
        }
        // 将桶中的数据按顺序从小到大放回data中
        pos = 0;
        for(int i= 0;i <= number_of_bucket - 1;i++){
            for(int j = 0;j < index[i];j++){
                data[pos++] = bask[i][j];
            }
        }
    }

    /**
     *  桶排序
     * @param size          数组长度
     * @param upperBound    上限大小
     * @param lownBound     下限大小
     * @param print         是否打印
     */
    protected static void testBasketFast(int size, int upperBound, int lownBound, boolean print){
        int[] toSortData = RandomMath.arrayInteger(size, upperBound, lownBound);

        int max = IntegerUtil.maxValue(toSortData);
        int min = IntegerUtil.minValue(toSortData);
        long millesTime = System.currentTimeMillis();
        long nanoTime = System.nanoTime();
        BasketSort.basketFast(toSortData, max, min);
        millesTime = System.currentTimeMillis() - millesTime;
        nanoTime = System.nanoTime() - nanoTime;
        System.out.println("basketFast sort data length: " + toSortData.length + ",max:" + IntegerUtil.maxValue(toSortData) + ",min:" + IntegerUtil.minValue(toSortData) + ",used time Millis time:" + millesTime + " ,nano time:" + nanoTime);
        if(print) {
            for (int i = 0; i < toSortData.length; i++) {
                System.out.print(toSortData[i] + ",");
            }
        }
    }

    /**
     * 快速桶排序
     * int类型的数据，数据范围不是特别大。桶的大小为最大值与最小值的差值
     * 测试数据：
     * basketFast sort data length: 5000,0000,max:199999998,min:100000002,used time Millis time:1452 ,nano time:1452590933
     * basketFast sort data length: 100,max:10099,min:10000,used time Millis time:0 ,nano time:11359
     * @param data  data为待排序数组
     * @param maximum_array_value   数组最大值
     * @param minimum_array_value   数组最小值
     */
    public static void basketFast(int data[], final int maximum_array_value, final int minimum_array_value){
        // 桶大小
        int k = maximum_array_value - minimum_array_value + 1;
        // 桶
        int bask[] = new int[k];
        for(int i = 0;i < data.length;i++){
            bask[data[i] - minimum_array_value] ++ ;
        }
        // 将桶中的数据按顺序从小到大放回data中
        int pos = 0;
        for(int i= 0;i < k;i++){
            while (bask[i]-- > 0){
                data[pos++] = i + minimum_array_value;
            }
        }
    }

    public static void main(String[] args) {
        testBasket();
//        testBasketFast();

        int[] toSortData = {16262,16274,16261,16273,17773,17568,
                17683,17481,85069,85071,17774,17569,17304,10193,134506,134549,134556,134557,134554,134462,134505,134553,
                134465,134550,134412,134460,134411,134457,134456,134502,15723,134410,134459,134409,134548,134555,134463,134461,134415,134414,134458,134551,
                16574,134408,134413,134464,16219,15659,192,15656,20111,114512,17120,114474,114530,114528,114527,114526,114465,114529,114471,114416,154507,
                154430,17330,16096,16015,86350,154476,17623,144458,85000,114407,16573,84965,86320,70075,154477,17285,84956,85072,17382,16735,15836,114473,
                17219,15443,70012,70107,16101,86380,16142,15334,16123,124540,124410,20085,16234,134,144463,94530,16534,16551,15494,196,17561,114408,114511,
                114510,114513,139519,139518,30153,99509,10194,10171,17790,99502,144461,144460,17255,17253,17345,17343,99469,129550,15473,17386,17142,15637,
                17356,17872,16858,16635,15937,17631,16973,16466,16216,17309,16775,16469,16734,16548,16764,16344,15964,15243,17002,15495,17391,15515,17306,
                16058,17038,16367,17607,15603,17479,16478,16053,16280,17603,15475,16348,15885,16368,17141,17262,16354,17292,15304,15835,16797,15724,15888,
                15839,16976,16014,16211,16278,16636,17005,17714,15513,16465,17042,16831,16204,15638,16363,16357,16018,17788,16856,16542,16824,16895,15636,
                15679,17119,15634,15968,17637,17308,17009,15883,16127,17660,15884,16370,16220,17310,16099,16994,16243,16100,15939,16207,16543,17478,15886,
                17397,15658,16364,16777,15967,16770,16778,17311,17101,17613,16362,16345,17124,16827,15746,17116,17347,16802,17482,16826,16796,15283,16208,
                17611,17475,16537,16552,16140,16771,16473,15934,17388,16361,17036,16206,15804,15936,16125,16792,15263,17627,17562,17001,15725,17792,17614,
                17791,17037,17261,16472,17015,17615,16834,16768,17398,16774,17286,17118,17476,16632,16639,17140,17133,16464,16017,16828,16825,17324,17256,
                16057,16833,17480,16800,17620,17222,16854,17394,16799,17136,16098,16353,16549,16860,17138,17871,16823,15404,17389,17303,16019,16791,15403,
                16056,16093,16095,16209,17605,15744,17873,17350,16347,17716,17327,16481,15966,15807,15996,16244,16995,15657,15673,16540,17384,16855,16773,
                17257,16279,16369,16996,17399,16213,17624,15965,17566,15805,17117,15809,15998,15633,15747,17563,15728,17789,16350,16550,16634,17288,16016,
                16474,17560,17213,16480,16351,15994,17007,16365,17349,15727,17095,17144,16221,17013,16246,16794,15749,16275,16139,15995,16765,16538,16203,
                16766,17218,17472,16359,16217,17572,17004,17014,17137,16233,16126,17033,15514,15837,16349,16356,17121,15938,15678,17576,16857,15729,16218,
                17390,17663,17099,15838,17359,17034,17632,15806,16789,16352,16631,17564,17638,16245,16544,16277,17543,15264,16793,16482,17000,17008,17606,
                16210,16830,16477,17332,17291,16633,17258,16124,17659,15993,17215,16281,16859,17401,15493,17351,17877,16575,16795,17010,17400,16479,15969,
                16533,16463,16102,16829,17629,16832,16769,16801,16470,16790,16546,15244,16059,16343,17574,16767,16141,17290,17143,17640,17039,15677,16247,
                15655,16061,17630,16235,16772,16998,15889,16476,16798,15745,15963,16222,16776,17035,15935,16358,15303,16054,15743,16467,16541,15887,15834,
                17323,16346,16853,16763,16371,15574,16013,17003,15833,15573,15726,15575,16355,17006,15384,16475,16282,16215,17715,17221,16820,16468,16372,
                16205,15383,17100,15674,15635,16535,16822,15999,15653,16999,17354,16055,20030,20113,20101,20087,195,119408,35091,34981,35124,94449,94447,
                25151,25161,60078,17575,17474,17919,17355,139504,139513,139507,139561,139559,139511,139509,139563,139503,139556,139554,139564,139510,16471,
                30019,15676,154501,144465,144488,144483,144487,144485,144462,144434,144459,144430,144544,144489,144429,144558,144432,144486,16276,94452,
                124542,17358,139400,139547,144431,50057,50007,50107,17305,17616,15333,69960,85191,70121,69992,70102,70127,70128,70120,70122,70108,70125,
                70104,70072,69991,70123,69990,70106,70101,70103,70076,70105,70074,69961,70077,94546,132,17122,20096,20092,154456,17139,17874,60081,60039,
                60018,60077,60037,60079,60017,60038,17477,94510,94509,94511,94549,94547,94525,94416,94423,94386,94450,94563,94506,94387,94552,94564,94508,
                94451,94532,94550,94545,94505,94415,94463,17284,139401,119499,144433,144542,65097,94448,94526,20031,20088,19995,16821,16997,139419,139505,
                17639,17371,154452,154504,154506,154503,154498,154429,154450,154451,154388,154500,154455,124541,124411,124543,124480,124483,124550,124432,
                124430,124391,124390,124481,124546,124482,144545,194,119518,144543,20034,104555,119498,119467,16138,92,144464,144482,114509,114469,104515,
                30058,15444,17283,17636,17625,30014,30053,19996,17634,17658,50109,16366,70071,16060,119537,114472,114414,144491,144484,144490,144546,144435,
                144467,17123,20036,16547,94,20093,20099,20090,154499,16094,20112,20103,85030,17254,139514,139546,139566,139499,139515,139498,17395,15803,
                114552,113,17348,17326,124548,17618,70124,17260,17134,17102,17609,17325,17040,17626,17216,17619,17331,139508,17565,99508,139555,139399,
                119531,16214,94528,139500,16539,30016,119511,85359,65119,114413,114470,15748,99440,17360,20094,20082,20037,19992,20109,20027,20114,20032,
                20105,20100,20086,19993,20095,20089,19998,111,133,91,61,62,94527,94551,15997,50058,50108,30012,30059,30063,30065,30115,30152,29982,30054,
                30062,30013,30154,30119,119469,119400,119516,119536,119530,119512,119514,119539,119534,119401,119468,119532,134552,17289,15284,144540,10092,
                119517,20039,124490,10174,10173,10172,10091,10021,10191,15808,70126,94562,114415,114468,85031,114411,70011,85070,114410,94453,139421,154502,
                119513,154454,119519,119409,70073,15675,139420,139502,139501,17041,17641,17661,17357,17610,17372,17622,17104,17628,17115,114409,10195,16974,
                17220,112,65099,94548,99471,99506,17214,30114,30060,30020,17287,17870,17353,65117,35125,35069,35071,35092,35093,35121,35021,35022,35070,35123,
                35023,15654,17383,17662,17097,15933,16736,17217,17577,17642,139567,17328,17307,17604,144466,94385,94531,17567,17633,20026,20091,20033,19994,
                19997,17329,16212,139512,17103,17869,29981,30064,64997,20108,17571,85001,16545,17787,99442,99472,99501,99467,99439,99468,99438,99505,99507,
                99544,99503,99441,99470,17573,70100,193,191,131,93,114,17312,17608,17387,35001,30120,30066,50008,16360,124544,124547,20104,144541,144428,
                99504,30061,17635,30118,30117,17876,119460,119535,119533,119538,17612,17617,17396,17875,40118,40059,40125,39984,40055,40071,40077,40122,
                40093,40126,40117,40094,40124,40078,39989,40076,40073,40127,40119,40092,40100,40075,40091,39988,40072,40121,39985,40057,40098,39987,40056,
                40074,40060,40120,94529,17392,20102,35002,70010,99465,17135,17621,94507,114419,16975,17385,17259,17098,65068,65067,65098,65037,65017,10192,
                124431,16097,154428,154457,154505,154453,17344,65118,17016,16062,94446,119407,119510,119515,17346,17096,30116,17473,99466,139558,139422,
                139565,139398,139402,139517,139544,139506,139378,139418,139423,139545,99500,16536,17393,35122,17570};
        int max = IntegerUtil.maxValue(toSortData);
        int min = IntegerUtil.minValue(toSortData);
//        BasketSort.basketFast(toSortData, max, min);
        int a = 0;
        int turnRow = 30;
//        for (int i = 0; i < toSortData.length; i++) {
//            if(i%turnRow == 0){
//                System.out.println();
//            }
//            System.out.print(toSortData[i] + ",");
//            if(a == toSortData[i]){
//                System.out.println(a);
//            }else {
//                a = toSortData[i];
//            }
//        }
    }

}
